#!/bin/bash

# Firewall and router setup and control
# Version: 0.2.0
#
# Written by George D. Sotirov <gsotirov@obs.bg>
# Last updated: 2005-03-23
#

# Uncoment to enable debug
#set -x

# ****************************************************************************
# 1. General configuration
#

. /etc/firewall.conf

if [ "x$DENY_FILE" != "x" ]; then
  declare -a DENY_LIST
  DENY_LIST=(`cat "$DENY_FILE" | tr '\n' ' '`)
fi

# ****************************************************************************
# 2. Modules
#

# 2.1 Load modules
#
load_modules() {
# 2.1.1 Main module
  $MODPROBE ip_tables
# 2.1.2 Connection tracking
  #$MODPROBE ip_conntrack
  #$MODPROBE ip_conntrack_ftp
  #$MODPROBE ip_conntrack_irc
  #$MODPROBE ip_nat_ftp
  #$MODPROBE ip_nat_irc
# 2.1.3 Tables
  $MODPROBE iptable_filter
  $MODPROBE iptable_nat
  $MODPROBE iptable_mangle
# 2.1.4 Targets
  $MODPROBE ipt_MASQUERADE
  $MODPROBE ipt_TTL
  $MODPROBE ipt_LOG
  $MODPROBE ipt_REJECT
  $MODPROBE ipt_state
  $MODPROBE ipt_limit
}

# 2.2 Unload modules
#
unload_modules() {
  $RMMOD ipt_limit        >/dev/null 2>/dev/null
  $RMMOD ipt_state        >/dev/null 2>/dev/null
  $RMMOD ipt_REJECT       >/dev/null 2>/dev/null
  $RMMOD ipt_LOG          >/dev/null 2>/dev/null
  $RMMOD ipt_TTL          >/dev/null 2>/dev/null
  $RMMOD ipt_MASQUERADE   >/dev/null 2>/dev/null
  $RMMOD iptable_mangle   >/dev/null 2>/dev/null
  $RMMOD iptable_nat      >/dev/null 2>/dev/null
  $RMMOD iptable_filter   >/dev/null 2>/dev/null
  #$RMMOD ip_nat_irc       >/dev/null 2>/dev/null
  #$RMMOD ip_nat_ftp       >/dev/null 2>/dev/null
  #$RMMOD ip_conntrack_irc >/dev/null 2>/dev/null
  #$RMMOD ip_conntrack_ftp >/dev/null 2>/dev/null
  #$RMMOD ip_conntrack     >/dev/null 2>/dev/null
  $RMMOD ip_tables        >/dev/null 2>/dev/null
}

#
# 3. Kernel setup
#

kernel_setup() {
  file=$1
  action=$2

  case "k$action" in
    "ks_enable")
      echo "1" > $file 2>/dev/null
    ;;
    "ks_disable")
      echo "0" > $file 2>/dev/null
    ;;
  esac
}

#
# 4. Firewall and router setup
#

# 4.1 Initialization
#
flush() {
  # Flush everything
  $IPTABLES --flush
  $IPTABLES --table filter --flush
  $IPTABLES --table nat    --flush
  $IPTABLES --table mangle --flush

  # Delete chains
  $IPTABLES --delete-chain
  $IPTABLES --table filter --delete-chain
  $IPTABLES --table nat    --delete-chain
  $IPTABLES --table mangle --delete-chain
}

# 4.1 Default policy setup
#
set_default_policy() {
  $IPTABLES --policy INPUT   DROP
  $IPTABLES --policy OUTPUT  ACCEPT
  $IPTABLES --policy FORWARD DROP
}

# 4.2 SPOOF Chain
#
build_spoof_chain() {
  # Create chain
  $IPTABLES --new-chain SPOOF
  $IPTABLES --flush     SPOOF
  # Define chain
  if [ "x$SPOOF_LOG" == "xyes" ]; then
    $IPTABLES --append SPOOF --match limit --limit 1/s --jump LOG --log-prefix "[Spoofing] "
  fi
  # Default policy
  $IPTABLES --append SPOOF --jump DROP

  SPOOF_CHAIN=yes
}

# 4.3 BAD_TCP Chain - Do not process bad TCP packets
#
build_bad_tcp_chain() {
  # Create chain
  $IPTABLES --new-chain BAD_TCP
  $IPTABLES --flush     BAD_TCP
  # Define chain
  if [ "x$BAD_TCP_LOG" == "xyes" ]; then
    $IPTABLES --append BAD_TCP --protocol tcp --match limit --limit 1/s --jump LOG --log-prefix "[Bad TCP] "
  fi
  # Default policy
  $IPTABLES --append BAD_TCP --jump DROP

  BAD_TCP_CHAIN=yes
}

# 4.4 SCAN Chain - Prevent port scanning
#
build_scan_chain() {
  # Create chain
  $IPTABLES --new-chain SCAN
  $IPTABLES --flush     SCAN
  # Define chain
  if [ "x$SCAN_LOG" == "xyes" ]; then
    $IPTABLES --append SCAN --protocol tcp  --match limit --limit 1/s --jump LOG --log-prefix "[Possible TCP Scan] "
    $IPTABLES --append SCAN --protocol udp  --match limit --limit 1/s --jump LOG --log-prefix "[Possible UDP Scan] "
    $IPTABLES --append SCAN --protocol icmp --match limit --limit 1/s --jump LOG --log-prefix "[Possible ICMP Scan] "
    $IPTABLES --append SCAN --fragment      --matcg limit --limit 1/s --jump LOG --log-prefix "[Possible FRAG Scan] "
  fi
  # Default policy
  $IPTABLES --append SCAN --jump DROP

  SCAN_CHAIN=yes
}

# 4.5 DDoS Chain - Prevent [Distributed] Denial of Service attacks
#
build_ddos_chain() {
  # Create chain
  $IPTABLES --new-chain DDoS
  $IPTABLES --flush     DDoS
  # Define chain
  if [ "x$DDoS_LOG" == "xyes" ]; then
    $IPTABLES --append DDoS --match limit --limit 12/s --limit-burst 24 --jump RETURN
    $IPTABLES --append DDoS --jump LOG --log-prefix "[Possible DDoS attack] "
  fi
  # Default policy
  $IPTABLES --append DDoS --jump DROP

  DDoS_CHAIN=yes
}

# 4.6 TCP chain - Enable only specified TCP ports
#
build_tcp_chain() {
  # Create chain
  $IPTABLES --new-chain TCP
  $IPTABLES --flush     TCP
  # Define chain
  for PORT in $ENABLED_TCP_PORTS; do
    $IPTABLES --append TCP --protocol tcp --destination-port $PORT --jump ACCEPT
  done

  # Default policy
  $IPTABLES --append TCP --protocol tcp --jump DROP

  TCP_CHAIN=yes
}

# 4.7 UDP chain - Enalbe only specified UDP ports
#
build_udp_chain() {
  # Create chain
  $IPTABLES --new-chain UDP
  $IPTABLES --flush     UDP
  # Define chain
  for PORT in $ENABLED_UDP_PORTS; do
    $IPTABLES --append UDP --protocol udp --destination-port $PORT --jump ACCEPT
  done

  # Default policy
  $IPTABLES --append UDP --protocol udp --jump DROP

  UDP_CHAIN=yes
}

# 4.8 ICMP chain - Enable and/or limit only some services
#
build_icmp_chain() {
  # Create chain
  $IPTABLES --new-chain ICMP
  $IPTABLES --flush     ICMP
  # INFO: ICMP types
  # Type    Name                                  Reference
  # ------- ------------------------------------- ---------------
  #   0     Echo Reply                            [RFC792]
  #   1     Unassigned                            [JBP]
  #   2     Unassigned                            [JBP]
  #   3     Destination Unreachable               [RFC792]
  #   4     Source Quench                         [RFC792]
  #   5     Redirect                              [RFC792]
  #   6     Alternate Host Address                [JBP]
  #   7     Unassigned                            [JBP]
  #   8     Echo                                  [RFC792]
  #   9     Router Advertisement                  [RFC1256]
  #  10     Router Solicitation                   [RFC1256]
  #  11     Time Exceeded                         [RFC792]
  #  12     Parameter Problem                     [RFC792]
  #  13     Timestamp                             [RFC792]
  #  14     Timestamp Reply                       [RFC792]
  #  15     Information Request                   [RFC792]
  #  16     Information Reply                     [RFC792]
  #  17     Address Mask Request                  [RFC950]
  #  18     Address Mask Reply                    [RFC950]
  #  19     Reserved (for Security)               [Solo]
  #  20-29  Reserved (for Robustness Experiment)  [ZSu]
  #  30     Traceroute                            [RFC1393]
  #  31     Datagram Conversion Error             [RFC1475]
  #  32     Mobile Host Redirect                  [David Johnson]
  #  33     IPv6 Where-Are-You                    [Bill Simpson]
  #  34     IPv6 I-Am-Here                        [Bill Simpson]
  #  35     Mobile Registration Request           [Bill Simpson]
  #  36     Mobile Registration Reply             [Bill Simpson]
  #  37     Domain Name Request                   [RFC1788]
  #  38     Domain Name Reply                     [RFC1788]
  #  39     SKIP                                  [Markson]
  #  40     Photuris                              [RFC2521]
  #  41-255 Reserved                              [JBP]

  $IPTABLES --append ICMP --protocol icmp --icmp-type  0 --jump ACCEPT
  $IPTABLES --append ICMP --protocol icmp --icmp-type  3 --jump ACCEPT
  $IPTABLES --append ICMP --protocol icmp --icmp-type  4 --jump ACCEPT
  $IPTABLES --append ICMP --protocol icmp --icmp-type  8 --match limit --limit 6/m --jump ACCEPT
  $IPTABLES --append ICMP --protocol icmp --icmp-type  8 --jump ACCEPT
  $IPTABLES --append ICMP --protocol icmp --icmp-type 11 --jump ACCEPT
  $IPTABLES --append ICMP --protocol icmp --icmp-type 12 --jump ACCEPT
  $IPTABLES --append ICMP --protocol icmp --icmp-type 30 --jump ACCEPT
  # Default policy
  $IPTABLES --append ICMP --protocol icmp                --jump DROP

  ICMP_CHAIN=yes
}

# 5. Firewall setup
#
make_firewall() {
  # Set default policy
  set_default_policy
  # Build user chains
  build_spoof_chain
  build_bad_tcp_chain
  build_scan_chain
  build_tcp_chain
  build_udp_chain
  build_icmp_chain

  # 5.1 Zero counters on all chains
  #
  $IPTABLES --zero
  
  # 5.2 Setup INPUT chain
  #

  # Drop packets from any host from the deny list
  for i in $(seq 0 $((${#DENY_LIST[@]} - 1)))
  do
    $IPTABLES --append INPUT --source ${DENY_LIST[$i]} --jump DROP
  done

  if [ "x$SPOOF_CHAIN" == "xyes" ]; then
    # Log and drop suspicious source addresses
    $IPTABLES --append INPUT --in-interface $EXT_IF  --source $CLASS_A_PRVT_NTWK --jump SPOOF
    $IPTABLES --append INPUT --in-interface $INET_IF --source $CLASS_A_PRVT_NTWK --jump SPOOF

    $IPTABLES --append INPUT --in-interface $EXT_IF  --source $CLASS_B_PRVT_NTWK --jump SPOOF
    $IPTABLES --append INPUT --in-interface $INET_IF --source $CLASS_B_PRVT_NTWK --jump SPOOF

    $IPTABLES --append INPUT --in-interface $EXT_IF  --source $LO_NTWK           --jump SPOOF
    $IPTABLES --append INPUT --in-interface $INET_IF --source $LO_NTWK           --jump SPOOF
    $IPTABLES --append INPUT --in-interface $LAN_IF  --source $LO_NTWK           --jump SPOOF

    $IPTABLES --append INPUT --in-interface $EXT_IF  --source $CLASS_D_MLTCST    --jump SPOOF
    $IPTABLES --append INPUT --in-interface $INET_IF --source $CLASS_D_MLTCST    --jump SPOOF

    $IPTABLES --append INPUT --in-interface $EXT_IF  --source $CLASS_E_RSRVD_NET --jump SPOOF
    $IPTABLES --append INPUT --in-interface $INET_IF --source $CLASS_E_RSRVD_NET --jump SPOOF

    #$IPTABLES --append INPUT                         --source $ANYWHERE          --jump SPOOF
  fi

  if [ "x$BAD_TCP_CHAIN" == "xyes" ]; then
    # Log and drop some bad tcp packets
    $IPTABLES --append INPUT --protocol tcp --tcp-flags ALL  ALL                 --jump BAD_TCP
    $IPTABLES --append INPUT --protocol tcp --tcp-flags ALL  FIN,URG,PSH         --jump BAD_TCP
    $IPTABLES --append INPUT --protocol tcp --tcp-flags ALL  SYN,RST,ACK,FIN,URG --jump BAD_TCP
  fi
  
  if [ "x$SCAN_CHAIN" == "xyes" ]; then
    # Log and drop packets frequently used by port-scanners
    $IPTABLES --append INPUT --protocol tcp --tcp-flags ALL      NONE    --jump SCAN
    $IPTABLES --append INPUT --protocol tcp --tcp-flags SYN,FIN  SYN,FIN --jump SCAN
    $IPTABLES --append INPUT --protocol tcp --tcp-flags SYN,RST  SYN,RST --jump SCAN
    $IPTABLES --append INPUT --protocol tcp --tcp-flags FIN,RST  FIN,RST --jump SCAN
    $IPTABLES --append INPUT --protocol tcp --tcp-flags ACK,FIN  FIN     --jump SCAN
    $IPTABLES --append INPUT --protocol tcp --tcp-flags ACK,PSH  PSH     --jump SCAN
    $IPTABLES --append INPUT --protocol tcp --tcp-flags ACK,URG  URG     --jump SCAN
  fi
  
  if [ "x$DDoS_CHAIN" == "xyes" ]; then
    # Prevent SYN Denial of Service attacks
    $IPTABLES --append INPUT --protocol tcp --tcp-flags SYN,RST,ACK  SYN --jump DDoS
  fi

  # Limit packets on the external interface
  $IPTABLES --append INPUT --in-interface $EXT_IF  --protocol tcp  --jump TCP
  $IPTABLES --append INPUT --in-interface $EXT_IF  --protocol udp  --jump UDP
  $IPTABLES --append INPUT --in-interface $EXT_IF  --protocol icmp --jump ICMP

  # Limit packets on the internet interface
  $IPTABLES --append INPUT --in-interface $INET_IF --protocol tcp  --jump TCP
  $IPTABLES --append INPUT --in-interface $INET_IF --protocol udp  --jump UDP 
  $IPTABLES --append INPUT --in-interface $INET_IF --protocol icmp --jump ICMP 

  # Enable all traffic on the 'trusted' interfaces
  $IPTABLES --append INPUT --in-interface $LO_IF                   --jump ACCEPT
  if [ "x$ROUTER" == "xyes" ]; then
    $IPTABLES --append INPUT --in-interface $LAN_IF --source $LAN_NTWK --jump ACCEPT
  fi

  # 5.3 Setup OUTPUT chain
  #
  # No rules - everything is allowed

  # 5.4 FORWARD chain setup
  #
  if [ "x$ROUTER" == "xyes" ]; then
    $IPTABLES --append FORWARD --in-interface $LAN_IF  --out-interface $INET_IF --source $LAN_NTWRK      --jump ACCEPT
    $IPTABLES --append FORWARD --in-interface $INET_IF --out-interface $LAN_IF  --destination $LAN_NTWRK --jump ACCEPT
  fi

  # 5.5 Setup tables
  if [ "x$ROUTER" == "xyes" ]; then
    $IPTABLES --table mangle --append PREROUTING  --in-interface  $INET_IF --jump TTL --ttl-inc 1
    $IPTABLES --table mangle --append POSTROUTING --source $LAN_NTWRK --out-interface $INET_IF --jump TTL --ttl-set 64
    $IPTABLES --table nat    --append POSTROUTING --out-interface $INET_IF --jump MASQUERADE
  fi
}

#
# 6. Firewall and router control
#

# 6.1 Start
#
start() {
  load_modules
  flush

  if [ "a$ROUTER" == "ayes" ]; then
    echo -n "Configuring firewall and router... "
    kernel_setup $IP_FORWARD s_enable
  else
    echo -n "Configuring firewall... "
    kernel_setup $IP_FORWARD s_disable
  fi

  kernel_setup $TCP_SYNCOOKIES              s_enable
  kernel_setup $ICMP_ECHO_IGNORE_BROADCASTS s_enable
  kernel_setup $RP_FILTER                   s_enable
  kernel_setup $LOG_MARTIANS                s_enable

  make_firewall

  if [ $? == 0 ]; then
    echo "${C_GREEN}Done${C_NORMAL}"
  fi
}

# 6.2 Stop
#
stop() {
  if [ "a$ROUTER" == "ayes"
    echo -n "Stopping firewall and router... "
  else
    echo -n "Stopping firewall... "
  fi

  flush
  unload_modules

  if [ $? == 0 ]; then
    echo "${C_GREEN}Done${C_NORMAL}"
  fi
}

# 6.3 Restart
#
restart() {
  stop
  sleep 2
  start
}

# 6.4 Help information
#
help() {
  echo "Router and firewall control 0.1"
  echo "Written by George D. Sotirov <gdsotirov@dir.bg>"
  echo
  echo "Usage: ${0} [action]"
  echo "        action    - Action can be one of start, stop, restart, help."
  echo "                    Default is help."
  echo
}

#
# Main program
#
case "$action" in
  "start")
    start
  ;;
  "stop")
    stop
  ;;
  "restart")
    restart
  ;;
  *)
    help
esac
